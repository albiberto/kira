@page "/workloads"
@using Kira.Extensions
@using Kira.Infrastructure.Options
@using Microsoft.Extensions.Options
@inject IOptions<JiraOptions> Options;

<Filter Query=Query QueryChanged=QueryChanged></Filter>

@if (Query.Empty)
{
    return;
}

<RadzenCard class="my-2">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left">
            <RadzenCheckBox TriState="true" TValue="bool?" @bind-Value="@allGroupsExpanded" Name="allGroupsExpanded" Change="@ToggleGroups"/>
            <RadzenLabel Text="All groups expanded by default" Component="allGroupsExpanded" Style="margin-left: 8px; margin-right: 32px; vertical-align: middle;"/>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right">
            <RadzenButton Text="Expand" Click="@(_ => ToggleGroups(true))" style="margin-right: 16px" Disabled=@(allGroupsExpanded == true) Size="ButtonSize.ExtraSmall"/>
            <RadzenButton Text="Collapse" Click="@(_ => ToggleGroups(false))" Disabled=@(allGroupsExpanded == false) Size="ButtonSize.ExtraSmall"/>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenStack class="rz-mt-4">
    <RadzenDataGrid @ref="grid"
                    TItem="Model"
                    Data="@issues" LoadData="LoadData" Count="count" IsLoading="isLoading"
                    AllowGrouping="true"
                    AllowFiltering="false"
                    AllowColumnResize="true"
                    AllowPaging="false"
                    GroupRowRender="OnGroupRowRender"
                    @bind-AllGroupsExpanded="@allGroupsExpanded"
                    AllowSorting="true"
                    Render="@OnRender"
                    style="max-height: calc(100vh - 325px)">

        <GroupHeaderTemplate>
            @context.GroupDescriptor.GetTitle(): @(context.Data.Key)
        </GroupHeaderTemplate>

        <Columns>

            <RadzenDataGridColumn TItem="Model" SortProperty="Type" Property="ParentType" Title="Type" Width="90px;">
                <Template Context="issue">
                    <RadzenImage Path="@issue.TypeIcon" class="icon"/>
                    @if (!string.IsNullOrEmpty(issue.ParentTypeIcon))
                    {
                        <RadzenImage Path="@issue.ParentTypeIcon" class="icon" MouseEnter="@(args => ShowTooltip(args, "Parent"))"/>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Priority" Property="Priority" Title="Priority" Width="90px;">
                <Template Context="issue">
                    <RadzenImage Path="@issue.PriorityIcon" class="icon"/>
                    @if (!string.IsNullOrEmpty(issue.ParentPriorityIcon))
                    {
                        <RadzenImage Path="@issue.ParentPriorityIcon" class="icon" MouseEnter="@(args => ShowTooltip(args, "Parent"))"/>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Assignee" Property="Assignee" Title="Assignee" Width="175px;">
                <Template Context="issue">
                    @if (!string.IsNullOrEmpty(issue.AssigneeAvatar))
                    {
                        <RadzenImage Path="@issue.AssigneeAvatar" class="icon"/>
                    }
                    @issue.Assignee
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Reporter" Property="Reporter" Title="Reporter" Width="175px;">
                <Template Context="issue">
                    @if (!string.IsNullOrEmpty(issue.ReporterAvatar))
                    {
                        <RadzenImage Path="@issue.ReporterAvatar" class="icon"/>
                    }
                    @issue.Reporter
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Key" Property="ParentKey" Title="Parent" Width="110px;" Sortable="false" Groupable="false">
                <Template Context="issue">
                    <RadzenLink Path=@($"{Options.Value.UIAddress}{issue.ParentKey}") Text="@issue.ParentKey"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Key" Property="Key" Title="Key" Width="110px;" Groupable="false">
                <Template Context="issue">
                    <RadzenLink Path=@($"{Options.Value.UIAddress}{issue.Key}") Text="@issue.Key"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" Property="Summary" Title="Summary" Sortable="false" MinWidth="300px" Groupable="false">
                <Template Context="issue">
                    <RadzenText Text="@issue.Summary" MouseEnter="@(args => ShowTooltip(args, @issue.Summary))"></RadzenText>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Status" Property="Status" Title="Status" Width="130px;">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Outlined" BadgeStyle=@issue.StatusColor Text="@issue.Status"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="Start Date" Property="StartDate" Title="StartDate" Width="105px" Groupable="false">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Text" BadgeStyle=@BadgeStyle.Dark Text="@issue.StartDate"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="DueDate" Property="DueDate" Title="DueDate" Width="105px" Groupable="false">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Text" BadgeStyle=@BadgeStyle.Dark Text="@issue.DueDate"/>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="TimeOriginalEstimate" Property="TimeOriginalEstimate" Title="Original" Width="120px;" Groupable="false">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Text" BadgeStyle=BadgeStyle.Dark Text="@issue.TimeOriginalEstimate.ToWorkingDaysHoursMinutes()"/>
                </Template>
                <FooterTemplate>
                    <b>@(issues?.Sum(o => o.TimeOriginalEstimate).ToWorkingDaysHoursMinutes())</b>
                </FooterTemplate>
                <GroupFooterTemplate>
                    <b>@(context.Data.Items.Cast<Model>().Sum(o => o.TimeOriginalEstimate).ToWorkingDaysHoursMinutes())</b>
                </GroupFooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" SortProperty="TimeSpent" Property="TimeSpent" Title="Spent" Width="120px;" Groupable="false">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Text" BadgeStyle=BadgeStyle.Dark Text="@issue.TimeSpent.ToWorkingDaysHoursMinutes()"/>
                </Template>
                <FooterTemplate>
                    <b>@(issues?.Sum(o => o.TimeSpent).ToWorkingDaysHoursMinutes())</b>
                </FooterTemplate>
                <GroupFooterTemplate>
                    <b>@(context.Data.Items.Cast<Model>().Sum(o => o.TimeSpent).ToWorkingDaysHoursMinutes())</b>
                </GroupFooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" Property="RemainingEstimate" Title="Remaining" Width="120px;" Groupable="false">
                <Template Context="issue">
                    <RadzenBadge IsPill="true" Variant="Variant.Text" BadgeStyle=BadgeStyle.Dark Text="@issue.RemainingEstimate.ToWorkingDaysHoursMinutes()"/>
                </Template>
                <FooterTemplate>
                    <b>@(issues?.Sum(o => o.RemainingEstimate).ToWorkingDaysHoursMinutes())</b>
                </FooterTemplate>
                <GroupFooterTemplate>
                    <b>@(context.Data.Items.Cast<Model>().Sum(o => o.RemainingEstimate).ToWorkingDaysHoursMinutes())</b>
                </GroupFooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Model" Property="Progress" Title="Progress" Groupable="false" Width="200px">
                <Template Context="issue">
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Min="0" Max="100" Value="@issue.Progress" ShowValue="false"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>